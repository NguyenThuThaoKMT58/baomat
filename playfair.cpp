#include <bits/stdc++.h>
using namespace std;
vector<string> make_table(const string &key){ string k; for(char c: key){ if(!isalpha(c)) continue; char u=toupper(c); if(u=='J') u='I'; if(k.find(u)==string::npos) k.push_back(u); } for(char c='A'; c<='Z'; ++c){ if(c=='J') continue; if(k.find(c)==string::npos) k.push_back(c); } vector<string> table(5,string(5,' ')); for(int i=0;i<25;i++) table[i/5][i%5]=k[i]; return table; }
pair<int,int> pos(const vector<string>&t, char ch){ if(ch=='J') ch='I'; for(int i=0;i<5;i++) for(int j=0;j<5;j++) if(t[i][j]==ch) return {i,j}; return {-1,-1}; }
string prepare(const string &s){ string t; for(char c: s) if(isalpha(c)){ char u=toupper(c); if(u=='J') u='I'; t.push_back(u);} string out; for(size_t i=0;i<t.size();){ char a=t[i]; if(i+1==t.size()){ out.push_back(a); out.push_back('X'); break;} char b=t[i+1]; if(a==b){ out.push_back(a); out.push_back('X'); i++; } else { out.push_back(a); out.push_back(b); i+=2; } } if(out.size()%2) out.push_back('X'); return out; }
string playfair_encrypt(const string &pt, const vector<string>& table){ string p = prepare(pt); string out; for(size_t i=0;i<p.size(); i+=2){ auto A=pos(table,p[i]); auto B=pos(table,p[i+1]); if(A.first==B.first){ out.push_back(table[A.first][(A.second+1)%5]); out.push_back(table[B.first][(B.second+1)%5]); } else if(A.second==B.second){ out.push_back(table[(A.first+1)%5][A.second]); out.push_back(table[(B.first+1)%5][B.second]); } else { out.push_back(table[A.first][B.second]); out.push_back(table[B.first][A.second]); } } return out; }
string playfair_decrypt(const string &ct, const vector<string>& table){ string out; for(size_t i=0;i<ct.size(); i+=2){ auto A=pos(table,ct[i]); auto B=pos(table,ct[i+1]); if(A.first==B.first){ out.push_back(table[A.first][(A.second+5-1)%5]); out.push_back(table[B.first][(B.second+5-1)%5]); } else if(A.second==B.second){ out.push_back(table[(A.first+5-1)%5][A.second]); out.push_back(table[(B.first+5-1)%5][B.second]); } else { out.push_back(table[A.first][B.second]); out.push_back(table[B.first][A.second]); } } return out; }
int main(){ string key, pt; cout<<"Key: "; getline(cin,key); cout<<"Plain: "; getline(cin,pt); auto table = make_table(key); cout<<"Table:\n"; for(auto &r:table) cout<<r<<"\n"; string ct = playfair_encrypt(pt, table); cout<<"Encrypted: "<<ct<<"\n"; cout<<"Decrypted (approx): "<<playfair_decrypt(ct, table)<<"\n"; }
